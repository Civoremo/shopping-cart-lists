{"version":3,"sources":["components/singleItem.js","components/need.js","components/found.js","components/newItemInput.js","App.js","serviceWorker.js","index.js"],"names":["SingleItem","props","item","move","remove","react_default","a","createElement","className","onClick","NeedList","items","Object","keys","filter","map","itemName","singleItem","key","FoundList","NewItemInput","handleChange","addItem","newItemText","onSubmit","onChange","type","placeholder","name","autoComplete","value","App","state","apples","bRead","Butter","cereal","juiCe","bananas","EGGs","e","_this","setState","defineProperty","target","addNewItem","preventDefault","duplicate","duplicateCheck","alert","objectSpread","prevState","temp","newItem","list","isDuplicate","toLocaleLowerCase","moveItem","deleteItem","newItemInput","this","need","found","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3b7b6d7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SingleItem = props => {\r\n    const { item, move, remove } = props;\r\n\r\n    return (\r\n        <div className=\"single-item-container\">\r\n            <p className=\"item-content\">{item}</p>\r\n            <div className=\"item-button-container\">\r\n                <button onClick={() => move(item)}>Move</button>\r\n                <button onClick={() => remove(item)}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleItem;\r\n","import React from \"react\";\r\nimport SingleItem from \"./singleItem\";\r\n\r\nconst NeedList = props => {\r\n    const { items, move, remove } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"need-list-container\">\r\n                <h3 className=\"list-title-text\">Need</h3>\r\n                <div>\r\n                    {Object.keys(items).filter(item => items[item] === 0).map(itemName => {\r\n                        return <SingleItem key={itemName} item={itemName} move={move} remove={remove} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NeedList;\r\n","import React from \"react\";\r\nimport SingleItem from \"./singleItem\";\r\n\r\nconst FoundList = props => {\r\n  const { items, move, remove } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"found-list-container\">\r\n                <h3 className=\"list-title-text\">Found</h3>\r\n                <div>\r\n                    {Object.keys(items).filter(item => items[item] === 1).map(itemName => { \r\n                        return <SingleItem key={itemName} item={itemName} move={move} remove={remove} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FoundList;\r\n","import React from \"react\";\r\n\r\nconst NewItemInput = props => {\r\n    const { handleChange, addItem, newItemText } = props;\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={addItem}>\r\n                <input \r\n                    onChange={handleChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Add new item\" \r\n                    name=\"newItemText\"\r\n                    autoComplete=\"off\"\r\n                    value={newItemText}\r\n                />\r\n                <button onClick={addItem}>Add item</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewItemInput;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport NeedList from \"./components/need\";\r\nimport FoundList from \"./components/found\";\r\nimport NewItemInput from \"./components/newItemInput\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        items: {\r\n            apples: 0,\r\n            bRead: 0,\r\n            Butter: 0,\r\n            cereal: 0,\r\n            juiCe: 0,\r\n            bananas: 1,\r\n            EGGs: 1,\r\n        },\r\n        newItemText: \"\",\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    addNewItem = e => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.newItemText) {\r\n            let duplicate = false;\r\n            duplicate = this.duplicateCheck(this.state.newItemText, this.state.items, duplicate)\r\n\r\n            if (duplicate) {\r\n                alert(\"Item already in list!\");\r\n                this.setState({\r\n                    ...this.state,\r\n                    newItemText: \"\",\r\n                });\r\n            } else {\r\n                this.setState(prevState => {\r\n                    let temp = { ...prevState.items };\r\n                    temp[this.state.newItemText] = 0;\r\n                    prevState.newItemText = \"\";\r\n                    return { items: temp };\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    duplicateCheck = (newItem, list, isDuplicate) => {\r\n        for (let item in list) {\r\n            if (\r\n                item.toLocaleLowerCase() ===\r\n                newItem.toLocaleLowerCase()\r\n            ) {\r\n                return isDuplicate = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    moveItem = item => {\r\n        this.setState(prevState => {\r\n            let temp = { ...prevState.items };\r\n            if (temp[item] === 0) {\r\n                temp[item] = 1;\r\n            } else {\r\n                temp[item] = 0;\r\n            }\r\n            return { items: temp };\r\n        });\r\n    };\r\n\r\n    deleteItem = item => {\r\n        this.setState(prevState => {\r\n            let temp = { ...prevState.items };\r\n            delete temp[item];\r\n            return { items: temp };\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header>\r\n                    <h2>Shopping Cart List</h2>\r\n                </header>\r\n\r\n                <section className=\"addNewItem-container\">\r\n                    <NewItemInput\r\n                        newItemText={this.state.newItemText}\r\n                        handleChange={this.handleChange}\r\n                        addItem={this.addNewItem}\r\n                    />\r\n                </section>\r\n\r\n                <section className=\"shopping-list-container\">\r\n                    <NeedList\r\n                        items={this.state.items}\r\n                        move={this.moveItem}\r\n                        remove={this.deleteItem}\r\n                    />\r\n                    <FoundList\r\n                        items={this.state.items}\r\n                        move={this.moveItem}\r\n                        remove={this.deleteItem}\r\n                    />\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}